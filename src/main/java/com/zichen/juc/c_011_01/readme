synchronized底层实现：
JDK早期 ： synchronized是重量级的 - 要去操作系统申请
后来做了改进
    锁升级概念：
        第一个线程来访问，是没有给Object加锁的，只是在MarkWord上做了记录这个线程的id - 偏向锁
        如果有线程争用 - 升级为 自旋锁
            自旋锁默认旋 10 次
        如果自旋10次之后还没有得到这把锁，则升级为 - 重量级锁
            重量级锁需要向OS申请锁
- 执行时间非常长，或者线程数比较多用重量级锁（系统锁）
- 枷锁代码执行时间较短，或者线程数比较少，用自旋锁


synchronized(Object) 锁定一个对象的时候，不可以使用String常量/Integer/Long
    - String常量范围比较大了，有可能出现和别人对同一个常量对象家锁，会出现什么问题就很难预测了
    - Integer内部做了特殊的处理，改变了它的值，那就回生成一个新对象，锁定它不太合适
